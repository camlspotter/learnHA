[mypy]
ignore_missing_imports = False
disallow_untyped_defs = True
# reject 42 == "answer, "hello" in [1,2,3]
strict_equality = True
check_untyped_defs = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
# warn_return_any = True
warn_unreachable = True
extra_checks = True

# Untyped definitions and calls:
#   Configure how untyped definitions and calls are handled. Note: by default, mypy ignores any untyped function definitions
#   and assumes any calls to such functions have a return type of 'Any'.
# 
#   --disallow-untyped-calls  Disallow calling functions without type annotations from functions with type annotations
#                             (inverse: --allow-untyped-calls)
#   --untyped-calls-exclude MODULE
#                             Disable --disallow-untyped-calls for functions/methods coming from specific package, module, or
#                             class
#   --disallow-untyped-defs   Disallow defining functions without type annotations or with incomplete type annotations
#                             (inverse: --allow-untyped-defs)
#   --disallow-incomplete-defs
#                             Disallow defining functions with incomplete type annotations (while still allowing entirely
#                             unannotated definitions) (inverse: --allow-incomplete-defs)
#   --check-untyped-defs      Type check the interior of functions without type annotations (inverse: --no-check-untyped-defs)
#   --disallow-untyped-decorators
#                             Disallow decorating typed functions with untyped decorators (inverse: --allow-untyped-
#                             decorators)
# 
# None and Optional handling:
#   Adjust how values of type 'None' are handled. For more context on how mypy handles values of type 'None', see:
#   https://mypy.readthedocs.io/en/stable/kinds_of_types.html#no-strict-optional
# 
#   --implicit-optional       Assume arguments with default values of None are Optional (inverse: --no-implicit-optional)
#   --no-strict-optional      Disable strict Optional checks (inverse: --strict-optional)
# 
# Configuring warnings:
#   Detect code that is sound but redundant or problematic.
# 
#   --warn-redundant-casts    Warn about casting an expression to its inferred type (inverse: --no-warn-redundant-casts)
#   --warn-unused-ignores     Warn about unneeded '# type: ignore' comments (inverse: --no-warn-unused-ignores)
#   --no-warn-no-return       Do not warn about functions that end without returning (inverse: --warn-no-return)
#   --warn-return-any         Warn about returning values of type Any from non-Any typed functions (inverse: --no-warn-return-
#                             any)
#   --warn-unreachable        Warn about statements or expressions inferred to be unreachable (inverse: --no-warn-unreachable)
# 
# Miscellaneous strictness flags:
#   --allow-untyped-globals   Suppress toplevel errors caused by missing annotations (inverse: --disallow-untyped-globals)
#   --allow-redefinition      Allow unconditional variable redefinition with a new type (inverse: --disallow-redefinition)
#   --no-implicit-reexport    Treat imports as private unless aliased (inverse: --implicit-reexport)
#   --strict-equality         Prohibit equality, identity, and container checks for non-overlapping types (inverse: --no-
#                             strict-equality)
#   --extra-checks            Enable additional checks that are technically correct but may be impractical in real code. For
#                             example, this prohibits partial overlap in TypedDict updates, and makes arguments prepended via
#                             Concatenate positional-only (inverse: --no-extra-checks)
#   --strict                  Strict mode; enables the following flags: --warn-unused-configs, --disallow-any-generics,
#                             --disallow-subclassing-any, --disallow-untyped-calls, --disallow-untyped-defs, --disallow-
#                             incomplete-defs, --check-untyped-defs, --disallow-untyped-decorators, --warn-redundant-casts,
#                             --warn-unused-ignores, --warn-return-any, --no-implicit-reexport, --strict-equality, --extra-
#                             checks
#   --disable-error-code NAME
#                             Disable a specific error code
#   --enable-error-code NAME  Enable a specific error code
# 
# Configuring error messages:
#   Adjust the amount of detail shown in error messages.
# 
#   --show-error-context      Precede errors with "note:" messages explaining context (inverse: --hide-error-context)
#   --show-column-numbers     Show column numbers in error messages (inverse: --hide-column-numbers)
#   --show-error-end          Show end line/end column numbers in error messages. This implies --show-column-numbers (inverse:
#                             --hide-error-end)
#   --hide-error-codes        Hide error codes in error messages (inverse: --show-error-codes)
#   --show-error-code-links   Show links to error code documentation (inverse: --hide-error-code-links)
#   --pretty                  Use visually nicer output in error messages: Use soft word wrap, show source code snippets, and
#                             show error location markers (inverse: --no-pretty)
#   --no-color-output         Do not colorize error messages (inverse: --color-output)
#   --no-error-summary        Do not show error stats summary (inverse: --error-summary)
#   --show-absolute-path      Show absolute paths to files (inverse: --hide-absolute-path)
# 
# Incremental mode:
#   Adjust how mypy incrementally type checks and caches modules. Mypy caches type information about modules into a cache to
#   let you speed up future invocations of mypy. Also see mypy's daemon mode:
#   mypy.readthedocs.io/en/stable/mypy_daemon.html#mypy-daemon
# 
#   --no-incremental          Disable module cache (inverse: --incremental)
#   --cache-dir DIR           Store module cache info in the given folder in incremental mode (defaults to '.mypy_cache')
#   --sqlite-cache            Use a sqlite database to store the cache (inverse: --no-sqlite-cache)
#   --cache-fine-grained      Include fine-grained dependency information in the cache for the mypy daemon
#   --skip-version-check      Allow using cache written by older mypy version
#   --skip-cache-mtime-checks
#                             Skip cache internal consistency checks based on mtime
# 
# Advanced options:
#   Debug and customize mypy internals.
# 
#   --pdb                     Invoke pdb on fatal error
#   --show-traceback, --tb    Show traceback on fatal error
#   --raise-exceptions        Raise exception on fatal error
#   --custom-typing-module MODULE
#                             Use a custom typing module
#   --old-type-inference      Disable new experimental type inference algorithm
#   --custom-typeshed-dir DIR
#                             Use the custom typeshed in DIR
#   --warn-incomplete-stub    Warn if missing type annotation in typeshed, only relevant with --disallow-untyped-defs or
#                             --disallow-incomplete-defs enabled (inverse: --no-warn-incomplete-stub)
#   --shadow-file SOURCE_FILE SHADOW_FILE
#                             When encountering SOURCE_FILE, read and type check the contents of SHADOW_FILE instead.

[mypy-run]
disallow_untyped_defs = False

[mypy-hybridlearner.inference.clustering.cluster_by_others]
disallow_untyped_defs = False
check_untyped_defs = False

[mypy-hybridlearner.infer_transaction.svm_operations]
disallow_untyped_defs = False
warn_return_any = False

[mypy-hybridlearner.obsolete.plotDebug]
disallow_untyped_defs = False

[mypy-hybridlearner.obsolete.model_printer.*]
disallow_untyped_defs = False

# Hard to type parsing functions
[mypy-hybridlearner.parser]
disallow_untyped_defs = False
check_untyped_defs = False
warn_unreachable = False

[mypy-hybridlearner.test_astdsl]
disallow_untyped_defs = False

[mypy-hybridlearner.test_annotation]
disallow_untyped_defs = False

[mypy-hybridlearner.test_invariant]
disallow_untyped_defs = False

[mypy-hybridlearner.test_svm]
disallow_untyped_defs = False

[mypy-hybridlearner.test_HA]
disallow_untyped_defs = False

[mypy-hybridlearner.test_parser]
disallow_untyped_defs = False

[mypy-sklearn.*]
ignore_missing_imports = True

[mypy-fastdtw.*]
ignore_missing_imports = True

[mypy-scipy.*]
ignore_missing_imports = True

[mypy-libsvm.*]
ignore_missing_imports = True

[mypy-matlab.*]
ignore_missing_imports = True
